{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","game_win","game_array","found","i","computer_choice","gameLevel","count","c","Math","floor","random","easy_choice","poss","push","urgent","index","good","t_p","t_count","j","tt_p","poss_r","length","pp","cal_result","max","maxint","max_arr","p","level","count1","p_r","score","win","poss_a","useState","gameArray","updateGameArray","fontSize","fontWeight","color","bfontStyle","setBfontStyle","buttonsText","setButtonsText","gameResult","setGameResult","gameStatus","setGameStatus","setGameLevel","handleClick","e","newArr","parseInt","target","value","sArr","bArr","className","id","onClick","style","onChange","v","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59cfdd19.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useState} from \"react\";\n\nfunction App() {\n  const game_win = (game_array) =>{\n    if(game_array[0] === 1 && game_array[1] === 1 && game_array[2] === 1) {\n      return 1;\n    }\n    if(game_array[3] === 1 && game_array[4] === 1 && game_array[5] === 1) {\n      return 1;\n    }\n    if(game_array[6] === 1 && game_array[7] === 1 && game_array[8] === 1) {\n      return 1;\n    }\n    if(game_array[0] === 1 && game_array[3] === 1 && game_array[6] === 1) {\n      return 1;\n    }\n    if(game_array[1] === 1 && game_array[4] === 1 && game_array[7] === 1) {\n      return 1;\n    }\n    if(game_array[2] === 1 && game_array[5] === 1 && game_array[8] === 1) {\n      return 1;\n    }\n    if(game_array[0] === 1 && game_array[4] === 1 && game_array[8] === 1) {\n      return 1;\n    }\n    if(game_array[2] === 1 && game_array[4] === 1 && game_array[6] === 1) {\n      return 1;\n    }\n\n\n    if(game_array[0] === 2 && game_array[1] === 2 && game_array[2] === 2) {\n      return 2;\n    }\n    if(game_array[3] === 2 && game_array[4] === 2 && game_array[5] === 2) {\n      return 2;\n    }\n    if(game_array[6] === 2 && game_array[7] === 2 && game_array[8] === 2) {\n      return 2;\n    }\n    if(game_array[0] === 2 && game_array[3] === 2 && game_array[6] === 2) {\n      return 2;\n    }\n    if(game_array[1] === 2 && game_array[4] === 2 && game_array[7] === 2) {\n      return 2;\n    }\n    if(game_array[2] === 2 && game_array[5] === 2 && game_array[8] === 2) {\n      return 2;\n    }\n    if(game_array[0] === 2 && game_array[4] === 2 && game_array[8] === 2) {\n      return 2;\n    }\n    if(game_array[2] === 2 && game_array[4] === 2 && game_array[6] === 2) {\n      return 2;\n    }\n    let found = 3;\n    for(let i = 0; i < 9; i++) {\n      if(game_array[i] === 0) {\n        found = 0;\n      }\n    }\n    return found;\n  };\n  const easy_choice = (game_array) => {\n    let count = 0;\n    for(let i = 0; i < 9; i++) {\n      if(game_array[i] === 0) count++;\n    }\n    let c = Math.floor(Math.random() * count);\n    count = 0;\n    for(let i = 0; i < 9; i++) {\n      if(count === c && game_array[i] === 0) {\n        game_array[i] = 2;\n        return i;\n      }\n      if(game_array[i] === 0) count++;\n    }\n    game_array[8] = 2;\n    return 8;\n  };\n  \n  const computer_choice = (game_array) => {\n    if(gameLevel === 0) {\n      let index = easy_choice(game_array);\n      return index;\n    }\n\n    let count = 0;\n    let poss = [];\n    for(let i = 0; i < 9; i++) {\n      if(game_array[i] === 0){\n        count++;\n        poss.push(i);\n      } \n    }\n    let urgent = 0;\n    let index = -1;\n    let good = 0;\n    if(gameLevel === 3) {\n    for(let i = 0; i < count; i++) {\n      let t_p = [...game_array];\n      t_p[poss[i]] = 2;\n      if(game_win(t_p) === 2) {\n        good = 1;\n        index = poss[i];\n      }\n    }\n    if(good === 1) {\n      //console.log(\"good=\" + index);\n      return index;\n    }\n    for(let i = 0; i < count; i++) {\n      let t_p = [...game_array];\n      t_p[poss[i]] = 1;\n      if(game_win(t_p) === 1) {\n        urgent = 1;\n        index = poss[i];\n      }\n    }\n    if(urgent === 1) {\n      //console.log(\"IndexII=\"+index);\n      return index;\n    }\n    }\n    \n    let dgood = 0;\n    if(gameLevel === 3) {\n    for(let i = 0; i < count; i++) {\n      let t_p = [...game_array];\n      t_p[poss[i]] = 2;\n      let t_count = 0;\n      for(let j = 0; j < count; j++){\n        if(j == i) continue;\n        let tt_p = [...game_array];\n        tt_p[poss[i]] = 2;\n        tt_p[poss[j]] = 2;\n        if(game_win(tt_p) === 2) {\n          dgood = 1;\n          t_count++;\n        }\n      }\n      if(t_count >= 2) {\n        index = poss[i];\n        //console.log(\"dwin=\"+index);\n        return index;\n      }      \n    }\n\n    let durgent = 0;\n    for(let i = 0; i < count; i++) {\n      let t_p = [...game_array];\n      t_p[poss[i]] = 1;\n      let t_count = 0;\n      for(let j = 0; j < count; j++){\n        if(j == i) continue;\n        let tt_p = [...game_array];\n        tt_p[poss[i]] = 1;\n        tt_p[poss[j]] = 1;\n        if(game_win(tt_p) === 1) {\n          durgent = 1;\n          t_count++;\n          //console.log(\"tcount=\"+i+j);\n        }\n      }\n      if(t_count >= 2) {\n        index = poss[i];\n        //console.log(\"dlose=\"+index);\n        return index;\n      }      \n    }\n    }\n\n    let poss_r = [];\n    for(let i = 0; i < poss.length; i++) {\n      let pp = cal_result(poss[i],game_array, 10,count);\n      poss_r.push(pp);\n    }\n    let max = -20000;\n    let maxint = 0;\n    let max_arr = [0];\n    for(let i = 0; i < poss.length; i++) {\n      if(max < poss_r[i]) {\n        max = poss_r[i];\n        index = poss[i];\n        maxint = 0;\n        max_arr[0] = poss[i];\n      } else if(max === poss_r[i]) {\n        maxint++;\n        max_arr.push(poss[i]);\n      }\n    }\n    if(gameLevel === 3){\n    if(maxint > 1) {\n      let j = Math.floor(Math.random()*maxint);\n      index = max_arr[j];\n    }\n    }\n    //console.log(\"p=\" + poss_r);\n    //console.log(\"i=\"+poss);\n    //console.log(\"index=\"+index);\n    return index;\n  }; \n\n  const cal_result = (p,game_array, level,count1) => {\n    let p_r = [...game_array];\n    let score = 0;\n    if(level == 10) {      \n      p_r[p] = 2;\n      let win = game_win(p_r);\n      if(win === 2) { return 10*count1;}\n      else if(win === 3) {return 0;}\n      let count = 0;\n      let poss_a = [];\n      for(let i = 0; i < 9; i++) {\n        if(p_r[i] === 0) {\n          count++;\n          poss_a.push(i);\n        }\n      }\n      for(let i = 0; i < poss_a.length; i++) {\n        score += cal_result(poss_a[i],p_r,-10,count);\n      }\n    } else if(level == -10) {      \n      p_r[p] = 1;\n      let win = game_win(p_r);\n      if(win === 1) { return -10*count1;}\n      else if(win === 3) {return 0;}\n      let count = 0;\n      let poss_a = [];\n      for(let i = 0; i < 9; i++) {\n        if(p_r[i] === 0) {\n          count++;\n          poss_a.push(i);\n        }\n      }\n      for(let i = 0; i < poss_a.length; i++) {\n        score += cal_result(poss_a[i],p_r,10,count);\n      }\n    }    \n    return score;\n  };\n\n  const [gameArray, updateGameArray] = useState([0,0,0,0,0,0,0,0,0]);\n  const [bfontStyle, setBfontStyle] = useState([{fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'},{fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'},\n  {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}, {fontSize: '24px', fontWeight: 'bold',color: 'rgb(255,255,255)'}]);\n  const [buttonsText, setButtonsText] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]);\n  const [gameResult, setGameResult] = useState(\"\");\n  const [gameStatus, setGameStatus] = useState(0);\n  const [gameLevel, setGameLevel] = useState(3);\n  function handleClick(e) {\n    let newArr = [...gameArray];\n    let i = parseInt(e.target.value);\n    let sArr = [...bfontStyle];\n    let bArr = [...buttonsText];\n    \n    const computerStyle = {\n      fontSize: '24px', \n      fontWeight: 'bold',\n      color: 'rgb(240,235,211)'\n    };\n    const userStyle = {\n      fontSize: '24px', \n      fontWeight: 'bold',\n      color: 'rgb(85,85,85)'\n    };\n    if(newArr[i] === 0 && gameStatus === 0) {\n      bArr[i] = \"X\";\n      newArr[i] = 1;\n      sArr[i] = userStyle;\n      let win = game_win(newArr);\n      if(win === 1) {\n        setGameResult(\"You win!\");\n        setGameStatus(1);\n      } else if(win === 3) {\n        setGameResult(\"It is a tie!\");\n        setGameStatus(1);\n      } else {\n        let j = computer_choice(newArr);\n        newArr[j] = 2;\n        bArr[j] = \"O\";\n        sArr[j] = computerStyle;\n        win = game_win(newArr);\n        if(win === 2) {\n          setGameResult(\"Computer win!\");\n          setGameStatus(1);\n        } else if(win === 3) {\n          setGameResult(\"It is a tie!\");\n          setGameStatus(1);\n        }\n      }\n      \n      setButtonsText(bArr);\n      updateGameArray(newArr);\n      setBfontStyle(sArr);\n    }\n    \n  }\n\n  function handleRestart(e) {\n    let newArr = [...gameArray];\n    let bArr = [...buttonsText];\n    for(let i = 0; i < 9; i++) {\n      newArr[i] = 0;\n      bArr[i] = '';\n    }\n    setButtonsText(bArr);\n    updateGameArray(newArr);\n    setGameStatus(0);\n    setGameResult(\"\");\n  }\n  function handleLevel(e) {\n    let v = parseInt(e.target.value);\n    let newArr = [...gameArray];\n    let bArr = [...buttonsText];\n    for(let i = 0; i < 9; i++) {\n      newArr[i] = 0;\n      bArr[i] = '';\n    }\n    setButtonsText(bArr);\n    updateGameArray(newArr);\n    setGameStatus(0);\n    setGameResult(\"\");\n    setGameLevel(v);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\">Tic-tac-toe </h1>\n      <h2 id=\"result\">{gameResult}</h2>\n      <section id=\"game\">\n        <button id=\"button0\" onClick={handleClick} value=\"0\" style={bfontStyle[0]}>{buttonsText[0]}</button>\n        <button id=\"button1\" onClick={handleClick} value=\"1\" style={bfontStyle[1]}>{buttonsText[1]}</button>\n        <button id=\"button2\" onClick={handleClick} value=\"2\" style={bfontStyle[2]}>{buttonsText[2]}</button>\n        <button id=\"button3\" onClick={handleClick} value=\"3\" style={bfontStyle[3]}>{buttonsText[3]}</button>\n        <button id=\"button4\" onClick={handleClick} value=\"4\" style={bfontStyle[4]}>{buttonsText[4]}</button>\n        <button id=\"button5\" onClick={handleClick} value=\"5\" style={bfontStyle[5]}>{buttonsText[5]}</button>\n        <button id=\"button6\" onClick={handleClick} value=\"6\" style={bfontStyle[6]}>{buttonsText[6]}</button>\n        <button id=\"button7\" onClick={handleClick} value=\"7\" style={bfontStyle[7]}>{buttonsText[7]}</button>\n        <button id=\"button8\" onClick={handleClick} value=\"8\" style={bfontStyle[8]}>{buttonsText[8]}</button>      \n      </section>\n      <section id=\"game_control\">\n        <button id=\"game_restart\" onClick={handleRestart}>Restart</button>\n        <select id=\"game_level\" value={gameLevel} onChange={handleLevel}> \n          <option value=\"0\" >Easy</option>\n          <option value=\"1\" >Middle</option>\n          <option value=\"3\" >Difficult</option>       \n        </select>\n        <div></div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}